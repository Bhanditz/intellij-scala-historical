trait a[b <: c] extends {val d = 2} with F with G {}
-----
ScalaFile
  ScTrait: a
    AnnotationsList
      <empty list>
    Modifiers
      <empty list>
    PsiElement(trait)('trait')
    PsiWhiteSpace(' ')
    PsiElement(identifier)('a')
    TypeParameterClause
      PsiElement([)('[')
      TypeParameter: b
        PsiElement(identifier)('b')
        PsiWhiteSpace(' ')
        PsiElement(<:)('<:')
        PsiWhiteSpace(' ')
        SimpleTypeElement: c
          CodeReferenceElement: c
            PsiElement(identifier)('c')
      PsiElement(])(']')
    PsiWhiteSpace(' ')
    ExtendsBlock
      PsiElement(extends)('extends')
      PsiWhiteSpace(' ')
      EarlyDefinitions
        PsiElement({)('{')
        ScPatternDefinition
          AnnotationsList
            <empty list>
          Modifiers
            <empty list>
          PsiElement(val)('val')
          PsiWhiteSpace(' ')
          ListOfPatterns
            ReferencePattern: d
              PsiElement(identifier)('d')
          PsiWhiteSpace(' ')
          PsiElement(=)('=')
          PsiWhiteSpace(' ')
          Literal
            PsiElement(integer)('2')
        PsiElement(})('}')
      PsiWhiteSpace(' ')
      PsiElement(with)('with')
      PsiWhiteSpace(' ')
      TraitParents
        SimpleTypeElement: F
          CodeReferenceElement: F
            PsiElement(identifier)('F')
        PsiWhiteSpace(' ')
        PsiElement(with)('with')
        PsiWhiteSpace(' ')
        SimpleTypeElement: G
          CodeReferenceElement: G
            PsiElement(identifier)('G')
      PsiWhiteSpace(' ')
      ScTemplateBody
        PsiElement({)('{')
        PsiElement(})('}')
